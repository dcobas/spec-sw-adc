\input texinfo    @c -*-texinfo-*-
%
% spec-sw.in - main file for the documentation
%
%%%%

%------------------------------------------------------------------------------
%
%                         NOTE FOR THE UNAWARE USER
%                         =========================
%
%    This file is a texinfo source. It isn't the binary file of some strange
%    editor of mine. If you want ASCII, you should "make spec-sw.txt".
%
%------------------------------------------------------------------------------

%
% This is not a conventional info file...
% I use three extra features:
%   - The '%' as a comment marker, if at beginning of line ("\%" -> "%")
%   - leading blanks are allowed (this is something I can't live without)
%   - braces are automatically escaped when they appear in example blocks
%

@comment %**start of header
@documentlanguage en
@setfilename spec-sw.info
@settitle spec-sw
@iftex
@afourpaper
@end iftex
@paragraphindent none
@comment %**end of header

@setchapternewpage off

@set update-month March 2012

@finalout

@titlepage
@title SPEC Software Support
@subtitle @value{update-month}
@subtitle A driver for the SPEC card and its FMC modules
@author Alessandro Rubini for CERN
@end titlepage
@headings single

@c ##########################################################################
@iftex
@contents
@end iftex

@c ##########################################################################
@node Top
@top Introduction

This is the manual for the SPEC device driver. SPEC is the @i{Simple
PCI-Express Carrier} for FMC cards, developed at
@url{http://www.ohwr.org/projects/spec}. This manual is part of the
associated software project, hosted at
@url{http://www.ohwr.org/projects/spec-sw}, whose @i{git} repository
hosts the latest version.


@menu
* The Core Driver::             
@end menu

@c ##########################################################################
@node The Core Driver
@chapter The Core Driver

The core driver lives in the @i{kernel} subdirectory. Like the board
itself, it is a carrier for sub-modules.

@menu
* Compiling the Driver::        
* Driver Operation::            
* Future Plans::                
@end menu

@c ==========================================================================
@node Compiling the Driver
@section Compiling the Drivers

 To compile
it, set the following variables in your environment:

@table @code

@item LINUX

	The top directory of the kernel sources for the version you
        are going to run the driver under. I'm testing mostly with 3.2,
	but I at least compile-test back to 2.6.35.

@item CROSS_COMPILE

	If you are cross-compiling, you need to set this variable.
	It is not usually needed for the PC, but if you are using
        the @i{Powec} board, you'll most likely need this. It is not
        needed if you compile for a different-sized PC (see below).

@item ARCH

	If you are cross-compiling, set this variable. Use @code{powerpc}
        for the @i{Powec}, @code{x86-64} if you compile on a 32-bit PC
        to run on a 64-bit PC and @code{i386} if you compile on a 64-bit
        PC to run on a 32-bit PC.

@end table

To compile run ``@code{make}'' with the previous variables set.  To
install run ``@code{make install} to install under
@code{/lib/modules/3.2.0} (or other version-based directory).  You can
set @code{INSTALL_MOD_PATH} to set a prefix before @code{/lib/modules}.
For example, if your target computer's filesystem is mounted under
@code{/mnt/target} you can run

@example
   make install INSTALL_MOD_PATH=/mnt/target
@end example

The modules are installed under the subdirectory @code{extra}. In
the previous case your driver will end up in 

@example
   /mnt/target/lib/modules/3.2.0/extra/spec.ko
@end example

@c ==========================================================================
@node Driver Operation
@section Driver Operation

The driver @code{spec.ko} will simply register itself as a PCI driver,
using both the ``old'' vendor and device ID (the Gennum identifiers)
and the new ones (CERN vendor and SPEC device).

The kernel will call the @i{probe} method of the driver, which in
turn perform the following actions:

@itemize @bullet
@item Program a @i{firmware} (or @i{gateware}) file in the FPGA
@item Load program code for the internal CPU (if any)
@item Load a sub-module for driving the FMC card (if any).
@end itemize

If the first step fails, nothing more is tried; the second and third
steps are expected to fail (you may not run a CPU in the FPGA or you
may have its program already included in the @i{gateware} file);
similarly you may not need a sub-driver, because the card is
stand-alone and needs no Linux driver.

The three files being looked for are named like this, assuming here
the card is seen under PCIe bus number 2:

@table @code

@item spec-B0002.bin

	This is the name of the @i{gateware} file, which is looked-for
        in @code{/lib/firmware} by the @i{hotplug} or @i{udev} program.

@item spec-B0002-cpu.bin

	This is the program code for the embedded CPU. Again, it must
        live in @code{/lib/firmware}

@item spec-B0002.ko

	The kernel sub-module. It is loaded using @i{modprobe}, so
        it should live in the same place where @code{spec.ko} is found.
        Also, please run ``@code{depmod -a}'' after copying or renaming
        the file

@end table

The central part of actual names of the three files is
customizable. You can use the @code{name=} module parameter to change
it.  The default value, ``@code{%b}'' expands to the bus number, as
shown. This allows to differentiate between cards, and have different
bitstreams and sub-drivers for each of them, according to the
geographical placement in the host computer.

The names being passed are using literally, with the exception
of the following three formats:

@table @code

@item %b

	The bus number, expanded as @code{B%04x"}.

@item %s

	The @i{slot} and @i{function} composite number, expanded as
        @code{S%04x}. Note that usually every PCIe mechanical slot is
        seen as a separate bus number, so using @code{%s} is not generally
        useful.

@item %%

	A literal @code{%}.

@end table

For example, I have two cards, fit in bus number 2 and 3. I prepared
the files for the card in slot 3 but not for the one in slot 2; I
receive the following messages when loading with the default name
(@code{%b}).  Here the @code{0} and @code{-2} items are error codes (0
means success):

@smallexample
    spec_probe (device 0002:0000)
    spec 0000:02:00.0: Can't load firwmare "spec-B0002.bin" - -2
    spec_probe (device 0003:0000)
    spec_load_fpga: got binary file "spec-B0003.bin", 1484404 (0x16a674) bytes
    spec_load_lm32: got program file "spec-B0003-cpu.bin", 49044 (0xbf94) bytes
    LM32 has been restarted
    spec_load_submodule: load "spec-B0003": 0
@end smallexample

The following messages are printed if I pass @code{name=pippo} (Italian for
@i{foo}):

@smallexample
    spec_probe (device 0002:0000)
    spec 0000:02:00.0: Can't load firwmare "spec-pippo.bin" - -2
    spec_probe (device 0003:0000)
    spec 0000:03:00.0: Can't load firwmare "spec-pippo.bin" - -2
@end smallexample

Please note that when a sub-module is loaded, it registers in the kernel
with its real name, not the one you renamed it to.  For example,
the output of @i{lsmod} in the former case shown above is as follows,
even if the module has been loaded as @code{spec-B0003.ko}:

@example
    Module                  Size  Used by
    spec                    3835  0
    spec_fine_delay          421  0
@end example


@c ==========================================================================
@node How sub-modules work
@section How sub-modules work

@b{Warning:} this is still in flush, and I'm open to suggestions. The
current implementation is really hackish and has a number of weak
points if several boards are in use.

When a sub-module is loaded, it can access the list of PCI devices
managed by the spec. Such a list is really list, in the Linux sense.

The sub-module is expected to identify its own cards and act
accordingly.  The current implementation trivial, and is on show in
@code{spec-wr-nic.o}. I won't document here because I hope it will
change soon.

This are the outstanding bugs that are begging to be fixed:

@table @i
@item The sub-module is loaded only once

	If two cards request the same module, one only is loaded when
        the first card is probed, and it may find an incomplete list
        of cards. Adding a delay is a hack I won't do.

@item Renaming doesn't really work

	Modules register by name (the real name, not the file name),
        so even if the module's file name is changed it won't re-load
        (you get ``@code{File exists}'' error).

@item Sub-modules are not told which spec to use

	Even if there's one sub-module for each spec, you won't know
        what card to use, because the module's own name may be different
        from the file name. Even reading @code{dev->names[SPEC_NAME_SUBMOD]}
        won't help

@end table

But this is the current status, and it works perfectly with one card
and one sub-module. I'll think more about it -- again, suggestions
are welcome.

@c ==========================================================================
@node Future Plans
@section Future Plans

The SPEC driver should scan its own wishbone bus according to the
self-description specification, that is being finalized these times,
instead of using static file names.



@c ##########################################################################
@node The WR-NIC
@chapter The WR-NIC

To be written.

@c ##########################################################################
@node Tools
@chapter Tools

The @i{tools} subdirectory of this package includes a few host-side
programs that may be useful while working with the SPEC device.

The tools currently available are:

@table @i

@item specmem

	The program acts like @i{devmem} or @i{devmem2} but in a
        simplified way. It receives one or two command line arguments:
        one for reading and two for writing. It makes a single 32-bit
        access to BAR0 of the Gennum PCI bridge; the first argument is
        the address, and the second argument is the value to be written.
        The @code{VERBOSE} environment variable makes the tool slightly
        more verbose.

@item spec-cl

	This is the @i{cpu loader}. It is not called @i{lm32-loader} to
        avoid confusion with other tools we have been using. It
        loads a program at offset 0x8000 in BAR0. This is where we
        usually have RAM memory for the soft-core running in the SPEC.
        The program also keeps the soft-core in reset state during the
        load operation, so the new program will be run after loading
        is over.

@end table

Currently, the tools only work with one SPEC card (i.e., if you have
two of them installed in your system, they work with one of them only
-- the first one appearing in @i{lspci}).  This will be fixed in later
versions, using command-line options or environment variables.

Use of these programs is exemplified in @ref{Troubleshooting}.


@c ##########################################################################
@node Troubleshooting
@chapter Troubleshooting

When loading several binary files, sometimes there's something that
goes wrong.  This section includes a few suggestion to identify what
step may have gone wrong.

First of all, you may want to check whether the FPGA binary has been
properly loaded and stuff is running inside it.  One  test that
can be made is whether the LM32 soft-core is actually able to run
programs.

To this aim, you can compile and run the @code{spec-test00-cpu}
program in the @code{test-lm32} directory of this package.

@c FIXME: load a default firmware binary
The strange name of the program is due to my plan to allow
``@code{insmod spec name=test00}'' in order to run this test and later
other ones.

Currently, the LM32 programs can be re-loaded to a running FPGA using
@i{spec-cl} (cpu loader), described in @ref{Tools}.  Thus, to load
the test program, you can run this command:

@example
    spec-cl spec-test00-cpu.bin
@end example

The loader still sometimes fails (usually the first time), with a
message like ``@code{programming error at 0 (expected 98000000, found
0000c56a)}''. Please retry: the second time it works (this has to
be fixed, I apologize meanwhile).

The test program si simply incrementing an integer variable over
and over. The variable lives at address 0x8000 in LM32 space, which
is address 0x88000 in SPEC space. Thus, you can test it like this:

@example
   # spec-cl spec-test00-cpu.bin; specmem 88000; sleep 1; specmem 88000
   00037cda
   0025bfa2
@end example

If you @code{export VERBOSE=1} beforehand you'll get a little more
information from both programs (please note that any value in VERBOSE
will work, the program only checks the variable exists):

@example
   # spec-cl spec-test00-cpu.bin; specmem 88000; sleep 1; specmem 88000
   spec-cl: Wrote 1700 bytes at offset 0x8000
   00088000 == 0003872c
   00088000 == 0025c8e0
@end example

As you see a running LM32 core increments its memory location slightly
more than 2.2million times per second (0x220000).  If you can verify
this, it means the FPGA is properly programmed and the CPU core is
running.

More troubleshooting tests will be added.


@c ##########################################################################
@bye


@c  LocalWords:  gnudd titlepage iftex texinfo CERN documentlanguage settitle
@c  LocalWords:  documentencoding setfilename afourpaper paragraphindent
@c  LocalWords:  setchapternewpage finalout
